# -*- coding: utf-8 -*-
"""diodo simu

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aaqAdEAJ8jjXTvbKCbBCjwbojXkPac5I
"""

import numpy as np
import sympy as sp
import matplotlib.pyplot as plt
import pandas as pd
from scipy.optimize import curve_fit
from sklearn.linear_model import LinearRegression
import scipy.stats as stats

import io

"""LINK COLLAB: https://colab.research.google.com/drive/1aaqAdEAJ8jjXTvbKCbBCjwbojXkPac5I?usp=sharing

Importar desde PC
"""

from google.colab import files
uploaded = files.upload()

"""Análisis del T"""

v = 3


cuadrada = pd.read_csv('onda cuadrada.csv')

V_in = "ch1_" + str(v) + "V"
V_out = "ch2_" + str(v) + "V"

t = cuadrada['t']
V_in_L = cuadrada[str(V_in)]
V_out_L = cuadrada[str(V_out)]


plt.figure(figsize=(15,4))
plt.plot(t, V_in_L, marker = 'o', label = '$V_{in}$')
plt.plot(t, V_out_L, marker = 'o', label = '$V_{out}$')
plt.ylabel('Diferencia potencial [V]', fontsize = 15)
plt.xlabel('Tiempo [s]', fontsize = 15)
plt.axvline(2.5E-05, c = 'g',  label = '$T_{i}$')
plt.axvline(2.85E-05, c = 'black',  label = '$T_{c}$')
plt.axvline(3.5E-05, c = 'grey',  label = '$T_{f}$')
plt.legend(fontsize = 17)
plt.grid(linestyle='--')
plt.grid(which = 'minor',linestyle=':', linewidth='0.1', color='black' )
plt.plot
plt.tick_params(axis="x",labelsize = 16)
plt.tick_params(axis="y",labelsize = 16)

"""T carga"""

#ch1 es el in
i = 1310
f = 1314
v = 7


cuadrada = pd.read_csv('onda cuadrada.csv')

V_in = "ch1_" + str(v) + "V"
V_out = "ch2_" + str(v) + "V"

t = cuadrada['t']
V_in_L = cuadrada[str(V_in)]
V_out_L = cuadrada[str(V_out)]

t = t[i:f]
V_in_L = V_in_L[i:f]
V_out_L = V_out_L[i:f]

l = len(V_out_L) - 1
c = float(V_out_L[l:])
j = 0

if c < 0:
  c = (-1) * c

if c > 0.625:
  print("Fuera de rango de error, reducir")
else:
  print("Dentro de rango de error")
  j = j + 1


l_t = len(t) - 1
t_f = float(t[l_t:])
t_i = float(t[1:2])

delta_t_carga = t_f - t_i

if j != 0:
  print("Delta T de carga: "+ str(delta_t_carga))


delta_t_carga

plt.figure(figsize=(15,4))
plt.plot(t, V_in_L, marker = 'o', label = '$V_{in}$')
plt.plot(t, V_out_L, marker = 'o', label = '$V_{out}$')
plt.ylabel('Diferencia potencial [V]', fontsize = 15)
plt.xlabel('Tiempo [s]', fontsize = 15)
plt.legend(fontsize = 13)
plt.grid(linestyle='--')
plt.grid(which = 'minor',linestyle=':', linewidth='0.1', color='black' )
plt.plot

"""T de acople

"""

i = 1530
f = 1850
v = 7

V_in = "ch1_" + str(v) + "V"
V_out = "ch2_" + str(v) + "V"

t = cuadrada['t']
V_in_L = cuadrada[str(V_in)]
V_out_L = cuadrada[str(V_out)]

t = t[i:f]
V_in_L = V_in_L[i:f]
V_out_L = V_out_L[i:f]

plt.figure(figsize=(15,4))
plt.plot(t, V_in_L, marker = 'o', label = '$V_{in}$')
plt.plot(t, V_out_L, marker = 'o', label = '$V_{out}$')
plt.ylabel('Voltaje [V]', fontsize = 15)
plt.xlabel('Tiempo [s]', fontsize = 15)
plt.legend(fontsize = 13)
plt.grid(linestyle='--')
plt.grid(which = 'minor',linestyle=':', linewidth='0.1', color='black' )
plt.plot

l_t = len(t) - 1
t_f = float(t[l_t:])
t_i = float(t[1:2])
delta_t_acople = t_f - t_i

print("Delta T de acople: "+ str(delta_t_acople))

l = len(V_out_L) - 1
c = float(V_out_L[l:])
l_in = len(V_in_L) - 1
c_in = float(V_in_L[l_in:])

"""T total"""

delta_total = delta_t_acople + delta_t_carga
delta_total

"""Todos los tau"""

tot = [9.70E-06, 1.01E-05, 1.04E-05, 1.06E-05, 1.08E-05]
caida = [5.90E-06, 5.90E-06, 6.10E-06, 6.20E-06, 6.40E-06]
alm = [3.80E-06, 4.20E-06, 4.30E-06, 4.40E-06, 4.40E-06]
t = [3, 4, 5, 6, 7]

plt.figure(figsize=(15,4))
plt.plot(t, tot, marker = 'o', label = '$T_{total}$')
plt.plot(t, caida, marker = 'o', label = '$T_{caida}$')
plt.plot(t, alm, marker = 'o', label = '$T_{alm}$')
plt.ylabel('Tiempo [s]', fontsize = 15)
plt.xlabel('Voltaje [V]', fontsize = 15)
plt.legend(fontsize = 17, loc='center right')
plt.grid(linestyle='--')
plt.grid(which = 'minor',linestyle=':', linewidth='0.1', color='black' )
plt.tick_params(axis="x",labelsize = 16)
plt.tick_params(axis="y",labelsize = 16)
plt.plot

"""Analizo circuito de LtSpice"""

#Grafico cada uno

from google.colab import files
uploaded = files.upload()

"""M1

"""

M1 = pd.read_csv('Diodos simulación rectif - M1.csv')

t = M1['time']
V_in = M1["V(a)"]
V_out = M1["V(vout)"]

t = t[:1500]
V_in = V_in[:1500]
V_out = V_out[:1500]

plt.figure(figsize=(15,4))
plt.plot(t, V_in, marker = 'o', ms = 5, label = '$V_{in}$')
plt.plot(t, V_out, marker = 'o', label = '$V_{out}$')
plt.ylabel('Diferencia potencial [V]', fontsize = 15)
plt.xlabel('Tiempo [s]', fontsize = 15)
plt.legend(fontsize = 13)
plt.grid(linestyle='--')
plt.grid(which = 'minor',linestyle=':', linewidth='0.1', color='black' )
plt.tick_params(axis="x",labelsize = 16)
plt.tick_params(axis="y",labelsize = 16)
plt.plot

"""M2

"""

M2 = pd.read_csv('Diodos simulación rectif - M2.csv')

t = M2['time']
V_in = M2["V(a)"]
V_out = M2["V(vout)"]

t = t[:1500]
V_in = V_in[:1500]
V_out = V_out[:1500]

plt.figure(figsize=(15,4))
plt.plot(t, V_in, marker = 'o', ms = 5, label = '$V_{in}$')
plt.plot(t, V_out, marker = 'o', label = '$V_{out}$')
plt.ylabel('Diferencia potencial [V]', fontsize = 15)
plt.xlabel('Tiempo [s]', fontsize = 15)
plt.legend(fontsize = 13)
plt.grid(linestyle='--')
plt.grid(which = 'minor',linestyle=':', linewidth='0.1', color='black' )
plt.tick_params(axis="x",labelsize = 16)
plt.tick_params(axis="y",labelsize = 16)
plt.plot

"""M3"""

M3 = pd.read_csv('Diodos simulación rectif - M3.csv')

t = M3['time']
I_R = M3["I(R1)"]
I_V = M3["I(V1)"]

t = t[:1300]
I_R = I_R[:1300]
I_V = I_V[:1300]

plt.figure(figsize=(15,4))
plt.plot(t, I_R, marker = 'o', ms = 5, label = '$I_{R}$')
plt.plot(t, I_V, marker = 'o', ms = 5, label = '$I_{V}$')
plt.ylabel('Corriente [A]', fontsize = 15)
plt.xlabel('Tiempo [s]', fontsize = 15)
plt.legend(fontsize = 13)
plt.grid(linestyle='--')
plt.grid(which = 'minor',linestyle=':', linewidth='0.1', color='black' )
plt.tick_params(axis="x",labelsize = 16)
plt.tick_params(axis="y",labelsize = 16)
plt.plot

"""M4"""

M4 = pd.read_csv('Diodos simulación rectif - M4.csv')

t = M4['time']
V_in = M4["V(a)"]
V_out = M4["V(vout)"]

t = t[:1500]
V_in = V_in[:1500]
V_out = V_out[:1500]

plt.figure(figsize=(15,4))
plt.plot(t, V_in, marker = 'o', ms = 5, label = '$V_{in}$')
plt.plot(t, V_out, marker = 'o', ms = 5, label = '$V_{out}$')
plt.ylabel('Diferencia potencial [V]', fontsize = 15)
plt.xlabel('Tiempo [s]', fontsize = 15)
plt.legend(fontsize = 13)
plt.grid(linestyle='--')
plt.grid(which = 'minor',linestyle=':', linewidth='0.1', color='black' )
plt.tick_params(axis="x",labelsize = 16)
plt.tick_params(axis="y",labelsize = 16)
plt.plot